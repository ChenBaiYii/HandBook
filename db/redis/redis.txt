--- REmote Dictionary Server ---

redis基本数据类型:
    5种数据结构: 字符串，哈希，列表，集合，有序集合
    在字符串基础上衍生出 位图(bitmap), HyperLogLog, GEO(地理信息定位)

redis提供的额外功能:
    键过期，可以用来实现缓存
    订阅发布，用来实现消息系统
    支持lua脚本，用来创造新redis命令
    提供简单的事务功能，能在一定程度上保证事务特性
    提供流水线(Pipeline)功能，客户端能将一批命令一次传到reids，减少网络开销

redis应用场景:
    redis可以做什么：缓存，排行榜系统，计数器应用，社交网络，消息队列系统
    redis不可以做什么：大量数据场景(内存成本限制)，冷数据(命中率低)

reids安装:
    sudo apt install redis-server  # debian/ubuntu

配置，启动，操作，关闭redis:
    启动：
        redis-server  默认启动不能加载配置文件，所以不会在生产服务器使用
        redis-server --configKey1 configValue1 --configKey2 configValue2
            如: redis-server --port 6380  不建议使用
        redis-server /opt/redis/redis.conf  配置文件启动，生产环境推荐
    操作:
        redis-cli -h {host} -p {port}  没有 -h -p 则默认 127.0.0.1:6379
        redis-cli -h {host} -p {port} {command}
            如: redis-cli -h {host} -p {port} {command}
    关闭:
        redie-cli shutdown  关闭reids，后可跟nosave|save选择关闭前是否持久化

    开启密码保护：
	vi /etc/redis/redis.conf
	#取消注释requirepass
	requirepass redisredis
    网络进程：
	netstat -nlt|grep 6379

    开启远程访问：
	vi /etc/redis/redis.conf
	#注释bind
	#bind 127.0.0.1

版本:
    奇数为不稳定版本，偶数为稳定版本
#########################################################################
--- API ---
全局命令(不区分大小写):
    keys *  查看所有键
    dbsize  键总数
    select 0  切换到0号数据库,默认0-16个数据库,各个数据库之间隔离, 不建议使用此功能
    exists key  键是否存在, 存在返回1否则0
    del key [...]  通用命令，可以删除任意类型，返回结果为成功删除的键个数，删除不存在的键返回0
    flushdb  清除当前数据库的数据,大量数据可能会阻塞redis
    flushall  清除所有16个数据库的数据,同上阻塞


    键过期:
        expire key seconds  如: expire hello 10
        ttl key  查看剩余过期时间，返回值大于0: 键剩余的过期时间 -1: 键没有设置过期时间 -2: 键不存在
    type key  键的数据结构类型，如果不存在返回none
    object encoding key  查询数据结构的内部编码
    键迁徙:
        move key to_db  不建议使用
        dump + restore: 
                dump key:
                    mechine1: dump key  存储为RDB格式
                restore key ttl value:
                    mechine2: restore keyname ttl RDB_value
        migrate: 具备原子特性,不需要开多个客户端
            migrate host port key|"" destination-db timeout [copy] [replace] [keys key [key...]]
                key|""  如果迁移一个键填keyname, 如果迁移多个填 ""
                destination-db  目标数据库索引
                timeout  超时时间毫秒


命令:
    设置值：
        set key value [ex seconds] [px milliseconds] [nx|xx]
            ex seconds: 为键设置秒级过期时间
            px milliseconds： 为键设置毫秒级过期时间
            nx: 键必须不存在才能成功，用于添加
            xx: 必须存在才能成功，用于更新
        mset key value [key value .... ]  批量设置值
    获取值:
        get key
        mget key [key ...]  批量获取值 不存在返回nil

    计数：
        decr 自减， incrby 自增指定数字，decrby 自减指定数字，incrbyfloat 自增浮点数
        incr key  自增计数
            值不是整数返回错误
            值不存在，按照值为0开始自增，返回结果是1
            列: decr key
                incrbyfloat key increment

    不常用命令:
        append key value  追加值 如：append key world
        strlen key  返回字符串长度

    主从同步: (sence) localhost:6379 localhost:6666
        #$ localhost:6666 >  slaveof localhost:6379  申请成为6379从服务器
                
-- 数据结构 --
字符串:
    incr('key')  如果key的内容可以解释为十进制数字则可自增
        incr('key', 10)  指定自增具体数字,输出为自增后的数值

    append  增加key的值
        append some_key world

    pattern


哈希:
    设置hash获取hash
        hset key field value
            例: hset user:1 name tom
        hget key field
            例: hget user:1 name
    删除 field：
        hdel key field [field ... ]
            例: hdel user:1 name
    计算field个数：
        hlen key
            列: hlen user:1
    批量设置或获取:
        hmset key field value [field value ...]
        hmget key field [feld ...]
    判断field是否存在:
        hexists key field

    获取所有field和value：
        hkeys key
        hvals key
        hgetall key  获取所有field-value

列表:
    从左/右开始添加：
        lpush/rpush
            例：lpush name:list hawking einstein carmen
     从某个元素前或后插入:
        linsert key before|after pivot value
            例: linsert name:list before hawking einstein
    查:
        lrange start end(包含自身)
            例：lrange 0 -1  可以从左到右获取列表元素
        lindex key index  获取列表指定下标的元素
        llen key  获取列表的长度
    删：
        从列表左侧/右侧弹出元素:
            lpop key
            rpop key
        删除指定元素:
            lrem key count value
                count>0  从左到右删除最大count个元素
                count<0  从右到左删除最大count个元素
                count=0  删除所有
    修改：
        lset key index new_value  设置新指定索引元素

    阻塞操作：
        blpop key [key ...] timeout
        brpop key [key ...] timeout
            timeout=0 列表为空一直阻塞

集合：




慢查询:
    slowlog-log-slower-that number  预设阈值
        =0会记录所有命令 <0任何命令都不会记录
        默认单位为微妙(1秒=1000毫秒=1000000微妙),默认10000,高OPS场景建议设置1毫秒
        config set slowlog-log-slower-that 20000
       
    slowlog-max-len  慢查询日记最大长度,生产服务器建议1000
        config set slowlog-max-len  
        config rewrite  持续化到本地

    slowlog get [n]  获取慢查询日志
    slowlog len  日志长度
    slowlog reset  重置日志
    

redis shell:
    redis-cli:
        -r 3 ping  命令执行3次
        -i  命令每隔几秒执行,必须和-r搭配
            redis-cli -r 5 -i 1 ping
        -x  读取标准输出作为cli的最后一个参数
            echo "world" | redis-cli -x set hello
        -c  连接cluster
        -a  认证
        --slave  把当前客户端模拟为当前redis节点的从节点,可以用来获取当前redis节点的更新操作
        --rdb  请求redis实例生成并发送RDB文件保存在本地
        --pipe  将命令封装成redis通信协议数据格式,批量发给redis
        --bigkeys  用scan命令对redis的键进行采样,找出内存占用比较大的键值,这些键可能是性能瓶颈
        --eval  用于执行lua标本
        --latency/latency-history/latency-dist  用于检测网络延迟
            redis-cli -h machine_b --latency  测试与目标机器的网络延迟
            reidis-cli -h machine_b -i 10 --latency-history  每隔10s输出网络情况
            --latency-dist  以图标形式输出延时信息
        --stat  实时获取redis重要统计信息
        --raw/--no-raw  格式化返回/原始数据
    redis-server:
        redis-server --test-memory 1024  测试内存,输出pass this test表示测试通过
    redis-benchmark:  redis基准性能测试
        -c  代表客户端的并发数量,默认50
        -n  客户端请求总量,默认10 0000
            redis-benchmark -c 100 -n 20000
        -q  仅显示benchmark的 requests per second信息
        -r  随机

        -P  代表每个请求的pipeline的数据量,默认1
        -k  <boolean>  是否启用keep-alive默认为1启用,0为不启用
        -csv  导出csv格式输出             
        -t  对指定命令做基准测试
            redis-benchmark -t get set -q -csv

客户端API:
    client list  列出所以登录的客户端
     
    

                
-- 持久化 --
reids 支持两种持久化 RDB AOF
    RDB:  把当前进程数据生成快照保存到硬盘, 有手动触发和自动触发
    手动触发:
        save  阻塞当前redis进程知道RDB完成,不建议使用
        bgsave redis fork子进程,子进程执行RDB,阻塞只发生在fork阶段,很短
    自动触发:
        从节点执行全量复制时,主节点自动执行bgsave生成REB发送给从节点
        debug reload命令重新加载reids时,自动触发save
        执行shutdown命令,如果没有开启AOF持久化功能则自动bgsave
    保存位置:
        RDB文件保存在dir配置指定的目录下, 文件名通过dbfilename配置指定,可以通过执行 
        config set dir {new dir}, config set dbfilename {new db filename}运行期动态执行,下次
        RDB会存到新目录
    压缩: 默认为LZF算法,默认开启 config set redbcompression {yes|no}动态修改,压缩会消耗cpu但建议开启

    AOF:  默认不开启需要配置 appendonly yes, 文件名通过appendfilename配置设置,默认appendonly.aof,路径与rdb配置相同
    手动触发:  bgrewriteaof
    自动触发:      
        auto-aof-rewrite-min-size  表示运行aof重写时文件最小体积,默认64mb
        auto-aof-rewiret-percentage  代表当前aof文件空间(aof_current_size)和上一次重写aof文件空间(aof_base_size)的比值
        触发时机 = aof_current_size > auto-aof-rewrite-min-size && 
                  (aof_current_size - aof_base_size) / aof_base_size >= auto-aof-rewrite-percentage
        aof_current_size和aof_base_size可以通过info Persistence统计信息中查看

-- 主从复制 --
    配置复制的三种方法:  复制后可以使用 info replication 查看复制信息
            slaveof no one 断绝主从关系,数据复制的数据仍然保存
            切换新的主服务器后将删除旧主的复制数据
        在配置文件中加入 slaveof {master_host} {master_port} 随启动生效
        redis-server 启动命令后添加 --slaveof {master_host} {master_port} 
        直接使用命令 slaveof {master_host} {master_port}
    安全:  主节点设置requirepass参数进行密码验证
    只读:  从节点默认slave-read-only=yes 只读
    传输延时:
        repl-disable-tcp-nodelay 默认关闭, 如果可以容忍默认40ms延时,则可以开启节省带宽



        

    
    















        




